+--
utilizando o curl para requisições http
-X POST : verbo da requisição
-v      : resposta verbosa com headers e body
-H      : cabeçalhos
-d      : corpo

curl http://localhost:3000/pagamentos/pagamento
    -X POST
    -v
    -H "Content-type: application/json"
    -d '{
        "forma_de_pagamento": "payfast",
        "valor": "10.87",
        "moeda": "BRL",
        "descricao": "descrição do pagamento"
    }'

curl http://localhost:3000/pagamentos/pagamento
    -X POST
    -v
    -H "Content-type: application/json"
    -d @files/pagamento.json

copy/paste cmd
literal:
    curl http://localhost:3000/pagamentos/pagamento -X POST -v -H "Content-type: application/json" -d "{\"forma_de_pagamento\": \"payfast\", \"valor\": \"10.87\", \"moeda\": \"BRL\", \"descricao\": \"descrição do pagamento\"}"
file:
    curl http://localhost:3000/pagamentos/pagamento -X POST -v -H "Content-type: application/json" -d @files/pagamento.json
=--

+--
status code HTTP importante para api REST:
100 Continue: o servidor recebeu a solicitação e o cliente pode continuar a comunicação.
200 Ok: tudo ocorreu como esperado.
201 Created: um novo recurso foi criado no servidor.
301 Moved: a url solicitada foi movida.
400 Bad Request: problemas na requisição do cliente.
404 Not Found: a url solicitada não foi encontrada.
500 Internal Server Error: algo inesperado aconteceu do lado do servidor
=--

+--
A sigla REST vêm de Representational State Transfer e surgiu da tese de doutorado de Roy Fielding, descrevendo as ideias que levaram à criação do protocolo HTTP. A Web é o maior exemplo de uso de uma arquitetura REST, onde os verbos são as operações disponíveis no protocolo (GET, POST, DELETE, PUT, OPTION...), os recursos são identificados pelas URLs e as representações podem ser definidas com o uso de Mime Types(texto, XML, JSON e outros).
=--

+--
Métodos HTTP
GET: retorna uma representação do recurso
POST: cria ou altera o recurso
PUT: cria ou altera o recurso
DELETE: remove o recurso
outras menos comuns, como HEAD e OPTIONS

Os quatro principais verbos do protocolo HTTP são comumente associados às operações de CRUD em sistemas Restful (POST -> INSERT, GET -> SELECT, PUT -> UPDATE, DELETE -> DELETE). Há uma grande discussão dos motivos pelos quais usamos POST para criação (INSERT) e PUT para alteração (UPDATE). A razão principal é que o protocolo HTTP especifica que a operação PUT deve ser idempotente, já POST não.

Idempotência e SAFE
Operações idempotentes são operações que podem ser chamadas uma ou mais vezes, sempre com o mesmo resultado final.

Uma operação é chamada SAFE se ela não altera nenhuma representação.

Idempotência e SAFE são propriedades das operações e fundamentais para a escalabilidade da Web.
=--

+--
Hipermídia
Os recursos serão apresentados por meio de representações. Seguindo os princípios RESTful, representações devem ser interligadas umas com a outras. Isso é chamado hipermídia e conhecido na Web através de hyperlinks. No nosso exemplo, a representações de um livro poderia conter a URI dos autores. Como resultado disso, é possível navegar entre os recursos.

Mais sobre hipermídia no blog da Caelum:

http://blog.caelum.com.br/hipermidia-e-contratos-dinamicos-menor-acoplamento/

RESTful
Qualquer sistema que aplique as ideias do estilo arquitetural REST, pode ser chamado de RESTful. Existe uma intensa discussão na comunidade sobre quando um sistema pode ser considerado RESTful ou não, porém, na maioria dos casos, basta apenas implantar uma parte do REST (em especial pensar em recursos, verbos fixos e ligações entre apresentações) para ser chamado de RESTfull
=--